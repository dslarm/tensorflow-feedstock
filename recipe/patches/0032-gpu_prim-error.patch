diff --git a/tensorflow/core/kernels/gpu_prim.h b/tensorflow/core/kernels/gpu_prim.h
index bef22b50ada..821b476cce9 100644
--- a/tensorflow/core/kernels/gpu_prim.h
+++ b/tensorflow/core/kernels/gpu_prim.h
@@ -37,32 +37,27 @@ namespace gpuprim = ::cub;
 
 // Required for sorting Eigen::half and bfloat16.
 namespace cub {
-template <>
-__device__ __forceinline__ void ThreadStoreVolatilePtr<Eigen::half>(
+__device__ __forceinline__ void ThreadStoreVolatilePtr(
     Eigen::half *ptr, Eigen::half val, Int2Type<true> /*is_primitive*/) {
   *reinterpret_cast<volatile uint16_t *>(ptr) =
       Eigen::numext::bit_cast<uint16_t>(val);
 }
 
-template <>
-__device__ __forceinline__ Eigen::half ThreadLoadVolatilePointer<Eigen::half>(
-    Eigen::half *ptr, Int2Type<true> /*is_primitive*/) {
-  uint16_t result = *reinterpret_cast<volatile uint16_t *>(ptr);
+__device__ __forceinline__ Eigen::half ThreadLoadVolatilePointer(
+    const Eigen::half *ptr, Int2Type<true> /*is_primitive*/) {
+  uint16_t result = *reinterpret_cast<volatile const uint16_t *>(ptr);
   return Eigen::numext::bit_cast<Eigen::half>(result);
 }
 
-template <>
-__device__ __forceinline__ void ThreadStoreVolatilePtr<Eigen::bfloat16>(
+__device__ __forceinline__ void ThreadStoreVolatilePtr(
     Eigen::bfloat16 *ptr, Eigen::bfloat16 val,
     Int2Type<true> /*is_primitive*/) {
   *reinterpret_cast<volatile uint16_t *>(ptr) =
       Eigen::numext::bit_cast<uint16_t>(val);
 }
 
-template <>
-__device__ __forceinline__ Eigen::bfloat16
-ThreadLoadVolatilePointer<Eigen::bfloat16>(Eigen::bfloat16 *ptr,
-                                           Int2Type<true> /*is_primitive*/) {
+__device__ __forceinline__ Eigen::bfloat16 ThreadLoadVolatilePointer(
+    Eigen::bfloat16 *ptr, Int2Type<true> /*is_primitive*/) {
   uint16_t result = *reinterpret_cast<volatile uint16_t *>(ptr);
   return Eigen::numext::bit_cast<Eigen::bfloat16>(result);
 }
diff --git a/third_party/xla/xla/service/gpu/gpu_prim.h b/third_party/xla/xla/service/gpu/gpu_prim.h
index 83605864498..d23453f88e1 100644
--- a/third_party/xla/xla/service/gpu/gpu_prim.h
+++ b/third_party/xla/xla/service/gpu/gpu_prim.h
@@ -37,8 +37,7 @@ namespace gpuprim = ::cub;
 
 // Required for sorting Eigen::half and bfloat16.
 namespace cub {
-template <>
-__device__ __forceinline__ void ThreadStoreVolatilePtr<Eigen::half>(
+__device__ __forceinline__ void ThreadStoreVolatilePtr(
     Eigen::half *ptr, Eigen::half val, Int2Type<true> /*is_primitive*/) {
   *reinterpret_cast<volatile uint16_t *>(ptr) =
       Eigen::numext::bit_cast<uint16_t>(val);
@@ -50,8 +49,7 @@ __device__ __forceinline__ Eigen::half ThreadLoadVolatilePointer(
   return Eigen::numext::bit_cast<Eigen::half>(result);
 }
 
-template <>
-__device__ __forceinline__ void ThreadStoreVolatilePtr<tsl::bfloat16>(
+__device__ __forceinline__ void ThreadStoreVolatilePtr(
     tsl::bfloat16 *ptr, tsl::bfloat16 val, Int2Type<true> /*is_primitive*/) {
   *reinterpret_cast<volatile uint16_t *>(ptr) =
       Eigen::numext::bit_cast<uint16_t>(val);
